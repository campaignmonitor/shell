/* ============================================================================
   BASE
   ========================================================================= */


/**
 * Here we provide very basic styling that most UI's will need. These styles
 * are applied at the most global level being applied via element selectors,
 * except for "Headings" which are scoped to classes (see that section for the
 * info).
 *
 * Everything in Base needs to be easily overridden which is really easy to do
 * as everything in Base sits right at the bottom in terms of specificity.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element
 * 2. Links
 * 3. Images
 * 4. Paragraphs
 * 5. Headings
 * 6. Print
 */




/* 1. Root element
   ========================================================================= */

html {
    background: $shell-base-root-element-background-color;
    color: $shell-g-color-text;
    font-family: $shell-g-font-family;
    font-size: $shell-g-font-size / 16 * 1em;
    font-weight: $shell-g-font-weight-normal;
    line-height: $shell-g-line-height;
}




/* 2. Links
   ========================================================================= */

a {
    color: $shell-g-color-link;
    text-decoration: $shell-base-link-text-decoration;

    &:hover,
    &:focus {
        color: $shell-g-color-link-hover;
        text-decoration: $shell-base-link-text-decoration-on-hover;
    }
}




/* 3. Images
   ========================================================================= */

/**
 * 1. `[alt]` text is visually offset if images don't load.
 * 2. Make responsive, i.e. keep images from scaling beyond the width of their
 *    parents.
 */

img {
    font-style: italic; // [1]
    height: auto; // [2]
    max-width: 100%; // [2]
}




/* 4. Paragraphs
   ========================================================================= */

/**
 * Apply an optional bottom margin to all paragraphs.
 */

@if $shell-base-apply-bottom-margin-to-paragraphs {
    p:not(:last-child) {
        margin-bottom: rem($shell-g-spacing);
    }
}




/* 5. Headings
   ========================================================================= */

/**
 * Here we scope our Base Heading styles to classes instead of the `<hx>`
 * element selector so our styles are not tied to the semantics of the heading
 * element, i.e. if you want a `<h4>` to look like a `<h2>` you can easily do
 * this.
 */


/**
 * Neutralise all the heading elements in favour of applying styles via the
 * `.heading-` class and its variants. We make all the heading elements use the
 * default typography styles and we may as well apply the default text colour.
 *
 * N.B. Resetting `margin` and `padding` are taken care of in
 * "Normalise/Reset".
 */


h1,
h2,
h3,
h4,
h5,
h6 {
    color: $shell-g-color-text;
    font-size: rem($shell-g-font-size);
    font-weight: $shell-g-font-weight-normal;
    line-height: $shell-g-line-height;
}

.heading-headline {
    font-size: rem($shell-g-font-size-x-large);
    font-weight: $shell-g-font-weight-bold;
}

.heading-headline--large {
    font-size: rem($shell-g-font-size-2x-large);
}

.heading-title {
    font-size: rem($shell-g-font-size-large);
}

.heading-sub-title {
    font-weight: $shell-g-font-weight-bold;
}




/* 6. Print
   ========================================================================= */

/**
 * N.B. it is okay to use `!important` here as we're doing it pre-emptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 */

@media print {
    /**
     * Global.
     */

    *,
    *::after,
    *::before,
    // First letter
    blockquote::first-letter,
    div::first-letter,
    li::first-letter,
    p::first-letter,
    // First line
    blockquote::first-line,
    div::first-line,
    li::first-line,
    p::first-line {
        background: transparent !important;
        box-shadow: none !important;
        color: $shell-g-color-black !important;
        text-shadow: none !important;
    }


    /**
     * Hide elements not really useful on a piece of paper.
     */

    audio,
    nav,
    video {
        display: none !important;
    }


    /**
     * Ensure all images are responsive.
     */

    img {
        height: auto !important;
        max-width: 100% !important;
    }


    /**
     * Make links always stand out.
     */

    a,
    a:visited {
        border-bottom: 0 !important;
        text-decoration: underline !important;
    }


    /**
     * Show the `[href]` and `[title]` attribute values of links and
     * abbreviations via their `::after` pseudo element.
     */

    a[href]::after {
        content: ' (' attr(href) ')';
    }

    abbr[title]::after {
        content: ' (' attr(title) ')';
    }


    /**
     * Don't show links that are fragment identifiers, or use the
     * `javascript:` pseudo protocol.
     */

    a[href^='javascript:']::after,
    a[href^='#']::after {
        content: '';
    }


    /**
     * Make the header row repeated at the top of each printed page, see:
     * http://css-discuss.incutio.com/wiki/Printing_Tables
     */

    thead {
        display: table-header-group !important;
    }


    /**
     * Better formatted `<pre>`s.
     */

    pre {
        white-space: pre-wrap !important;
    }


    /**
     * Page breaks.
     */

    h2,
    h3 {
        page-break-after: avoid;
    }

    blockquote,
    dl,
    img,
    ol,
    pre,
    tr,
    ul {
        page-break-inside: avoid;
    }


    /**
     * Orphans and widows.
     */

    h2,
    h3,
    p {
        orphans: 3;
        widows: 3;
    }

    /**
     * Apply bottom margin to all paragraphs.
     */

    p:not(:last-child) {
        margin-bottom: rem($shell-g-spacing) !important;
    }
}
