/* ============================================================================
   MIXINS AND FUNCTIONS
   ========================================================================= */


/**
 * All of Shell's mixins and functions.
 *
 * N.B. all mixins and functions to be written in SassDoc documentation system,
 * see: http://sassdoc.com/.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Private mixins and functions
 * 2. HiDPI background image (Mixin)
 * 3. Convert pixels to `rem`s or `em`s (Function)
 * 4. Apply at breakpoints (Mixin)
 * 5. Retrieve from maps (Function)
 * 6. Helpers (Mixin)
 * 7. Shared styles (Mixin)
 */




/* 1. Private mixins and functions
   ========================================================================= */

/**
 * Shell-only mixins and functions, not for Shell consumers although some can
 * be used if the need arises.
 */


/// Remove a unit from a number.
///
/// @author Chris Pearce
///
/// @access private
///
/// @param {Number [unit]} $number — Number to remove unit from
///
/// @returns {Number}
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     strip-unit(24px)
///     strip-unit(2.3em)

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}




/* 2. HiDPI background image (Mixin)
   ========================================================================= */

/// Easily apply a HiDPI background image. Autoprefixer will take care of
/// generating the non-standard `-webkit-min-device-pixel-ratio` for
/// browsers/devices that need it.
///
/// @link http://caniuse.com/#feat=css-media-resolution - Browser support.
///
/// @param {String} $file - The image filename and path if required.
/// @param {Number} $width [auto] - The image width + its unit e.g. `px`, or
/// the `em()` or `rem()` functions can be used.
/// @param {Number} $height [$width] - Same as width but for the height and
/// the height is optional, if empty it'll default to `$width`.
///
/// @throws '`$file` must be of type "string"'
/// @throws '`$width` must be of type "number"'
/// @throws '`$width` must have a unit'
/// @throws '`$height` must be of type "number"'
/// @throws '`$height` must have a unit'
/// @throws 'The `$shell-g-hidpi-mq` setting is required'
///
/// @example scss - Usage
///     .element-1 {
///         @include hidpi-bg-img('img/icons/tick@2x.png', 100px, 45px);
///     }
///     .element-2 {
///         @include hidpi-bg-img('arrow@2x.png', 32px);
///     }
///     .element-3 {
///         @include hidpi-bg-img('delete@2x.png', rem(134), rem(65));
///     }
///
/// @example css - CSS Output
///     .element-1 {
///         @media (min-resolution: 2dppx),
///                (min-resolution: 192dpi) {
///             background-image: url('img/icons/tick@2x.png');
///             background-size: 100px 45px;
///         }
///     }
///     .element-2 {
///         @media (min-resolution: 2dppx),
///                (min-resolution: 192dpi) {
///             background-image: url('arrow@2x.png');
///             background-size: 32px 32px;
///         }
///     }
///     .element-3 {
///         @media (min-resolution: 2dppx),
///                (min-resolution: 192dpi) {
///             background-image: url('delete@2x.png');
///             background-size: 8.375rem 4.062rem;
///         }
///     }

@mixin hidpi-bg-img($file, $width: auto, $height: $width) {
    @if type-of($file) != 'string' {
        @error '⚠️ Sorry, but `$file` must be of type "string" e.g. ' +
            '`arrow@2x.png`, you entered: `#{$file}` which is of type: ' +
            '"#{type-of($file)}".';
    }
    @else if type-of($width) != 'number' and $width != 'auto' {
        @error '⚠️ Sorry, but `$width` must be of type "number", you ' +
            'entered: `#{$width}` which is of type: ' +
            '"#{type-of($width)}".';
    }
    @else if $width != 'auto' and unitless($width) {
        @error '⚠️ Sorry, but `$width` must have a unit, you entered: ' +
            '`#{$width}`, please add a unit, e.g. #{$width}px';
    }
    @else if type-of($height) != 'number' and $height != 'auto' {
        @error '⚠️ Sorry, but `$height` must be of type "number", you ' +
            'entered: `#{$height}` which is of type: ' +
            '"#{type-of($height)}".';
    }
    @else if $height != 'auto' and unitless($height) {
        @error '⚠️ Sorry, but `$height` must have a unit, you entered: ' +
            '`#{$height}`, please add a unit, e.g. #{$height}px';
    }
    @else if global-variable-exists(shell-g-hidpi-mq) {
        @media #{$shell-g-hidpi-mq} {
            background-image: url('#{$file}');
            background-size: $width $height;
        }
    }
    @else {
        @error '⚠️ Sorry, but the setting: `$shell-g-hidpi-mq` doesn\'t ' +
            'exist, please make you\'re importing the Shell ' +
            ' `_settings.scss` partial and the `$shell-g-hidpi-mq` ' +
            'setting is in there as per the default set up.';
    }
}




/* 3. Convert pixels to `rem`s or `em`s (Function)
   ========================================================================= */

/// Convert pixels to `em`s.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Number [unitless]} $value — The pixel value to be converted
/// @param {Number [unitless]} $context [$shell-g-font-size] — The pixel
/// value of the context
///
/// @requires strip-unit()
///
/// @returns {Number [unit]} - Calculated `em` value e.g. `1.45em`
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     .element-1 {
///         margin-left: em(20, 18);
///     }
///     .element-2 {
///         margin-left: em(20);
///     }
/// @example css - CSS Output
///     .element-1 {
///         margin-left: 1.111em;
///     }
///     .element-2 {
///         margin-left: 1.25em;
///     }

@function em($value, $context: $shell-g-font-size) {
    @if type-of($value) != 'number' or type-of($context) != 'number' {
        @error 'You have to enter only numbers for `$value` and `$context`.';
    }
    @return strip-unit($value) / strip-unit($context) * 1em;
}


/// Convert pixels to `rem`s.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Number [unitless]} $value — The pixel value to be converted
///
/// @requires strip-unit()
///
/// @returns {Number [unit]} - Calculated `rem` value e.g. `1.45rem`
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     .element {
///         margin-left: rem(20);
///     }
/// @example css - CSS Output
///     .element {
///         margin-left: 1.25rem;
///     }

@function rem($value) {
    @if type-of($value) != 'number' {
        /* stylelint-disable-next-line max-line-length */
        @error 'You have to enter only a number for `$value`. You entered #{$value}`.';
    }
    @return strip-unit($value) / strip-unit($shell-g-font-size) * 1rem;
}




/* 4. Apply at breakpoints
   ========================================================================= */

/**
 * This mixin makes it really easy for a Shell consumer to apply certain parts
 * of Shell at any width based breakpoint(s).
 *
 * N.B. the mixin does not support height based breakpoints or breakpoint
 * ranges.
 *
 * The mixin can also be used outside of Shell in project styles but its main
 * purpose is to allow Shell consumers to easily apply certain parts of Shell
 * at any breakpoint(s), mainly the "Grid".
 *
 * The mixin will accept any of the named breakpoints set in "Settings ->
 * Breakpoints" (which can be renamed and breakpoints redefined in your
 * project) or any number (the pixel amount of the viewport). The breakpoints
 * get converted to the `em` unit which is best practice in Responsive Web
 * Design. You can also specify if you want a minimum or maximum width media
 * query by passing in the "min" or "max" labels after you define your
 * breakpoint, the default is minimum width media queries to favour the
 * "Mobile-first" approach.
 *
 * Using this mixin requires you to "opt in" as Shell doesn't want to assume
 * all of its consumers are building responsive UI's requiring the CSS this
 * mixin generates. Opting in requires changing the relevant Boolean settings
 * found in: "Settings". For example if you wanted the "Hide Visually" Helper
 * to use this mixin you change its Boolean setting:
 * `$shell-helper-hide-visually-apply-at-breakpoints` to `true` then define
 * the breakpoints you need via its other setting:
 * `$shell-helper-hide-visually-define-breakpoints`. So in the "Shell
 * Overrides" section of your project "Settings" you will have something like
 * this, depending on what breakpoints you choose:
 *
   $shell-helper-hide-visually-apply-at-breakpoints: true;
   $shell-helper-hide-visually-define-breakpoints: (400 max, lap, desk);
 *
 * You define your breakpoints in a comma separated list enclosed in curly
 * brackets with the "min" or "max" labels always coming *after* the
 * breakpoint. If you want ALL of the named breakpoints defined here:
 * "Settings -> Breakpoints" then you can simply pass in the word "all", like
 * so:
 *
   $shell-helper-hide-visually-define-breakpoints: (all);
 *
 * Right now the mixin only allows "all" by itself i.e. you cannot add numbers
 * (non-named breakpoints), so doing this will not work:
 *
   $shell-helper-hide-visually-define-breakpoints: (all, 900);
 *
 * Shell has a global breakpoint setting set in "Settings -> Breakpoints" so
 * that you can easily share breakpoints across everything that uses the
 * mixin. By default Shell doesn't apply any breakpoints to this setting, this
 * is for the Shell consumer to apply if they need the ability for shared
 * global breakpoints. So in the "Shell Overrides" section of your project
 * "Settings" you could do this:
 *
   $shell-g-global-breakpoints: (lap, desk);
 */

/// Outputs minimum and maximum width media-queries for some of Shell's
/// "Helpers" and all of Shell's "Grid column widths" at breakpoints defined
/// by the consumers of Shell.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {String} $class-selector - Class selector used to generate the
/// final class e.g. `.h-hide-visually` -> `.h-hide-visually-from-lap`.
/// @param {List} $breakpoints - A list of breakpoints either named
/// breakpoints e.g. `(palm, lap)`, integers e.g. `(400, 740)`, or "all" to
/// generate all the named breakpoints e.g. `(all)`. Each breakpoint can be
/// accompanied with a "max" or "min" limit label to tell the mixin to
/// generate a `min-width` or `max-width` media query e.g.
/// `(lap-large max, 460 max)`, the default is `min-width`.
///
/// @todo
/// Allow number breakpoints to be passed in along with "all"
/// Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     $shell-helper-hide-visually-define-breakpoints: (400 max, lap);
///
///     $shell-grid-col-4-define-breakpoints: (lap-large);
/// @example css - CSS Output
///     @media (max-width: 25em) {
///         .h-hide-visually-up-to-400 {
///             border: 0;
///             clip: rect(0 0 0 0);
///             height: 1px;
///             margin: -1px ;
///             overflow: hidden;
///             padding: 0;
///             position: absolute;
///             width: 1px;
///         }
///     }
///     @media (min-width: 40.0625em) {
///         .h-hide-visually-from-lap {
///             border: 0;
///             clip: rect(0 0 0 0);
///             height: 1px;
///             margin: -1px ;
///             overflow: hidden;
///             padding: 0;
///             position: absolute;
///             width: 1px;
///         }
///     }
///
///     @media (min-width: 56.3125em) {
///         .l-grid--col-2-from-lap-large {
///             width: 16.6666%;
///         }
///     }

@mixin apply-at-breakpoints($class-selector, $breakpoints: ()) {

    // So we can pass in "all" which will generate all of the media queries
    // using all of the named breakpoints from "Settings -> Breakpoints"
    // N.B. you cannot pass in a limit when using this—the limit will use the
    // default: `min-width` except for "Palm" which uses: `max-width`
    $all-breakpoints: map-keys($shell-g-breakpoints);
    @if $breakpoints == 'all' {
        $breakpoints: $all-breakpoints;
    }

    // When defining a breakpoint with a limit: "max" or "min", it needs to
    // be cast into a list of lists otherwise the mixin assumes there is a
    // breakpoint called "max" or "min"
    @if length($breakpoints) == 2 and index((min max), nth($breakpoints, 2)) {
        $breakpoints-copy: $breakpoints;
        $breakpoints: ();
        /* stylelint-disable-next-line max-line-length */
        $breakpoints: append($breakpoints, (nth($breakpoints-copy, 1) nth($breakpoints-copy, 2)));
    }

    // Loop through all the breakpoints passed in from the Shell consumer side
    @each $breakpoint in $breakpoints {

        // The "max" or "min" limit used for the media feature part of the
        // media query: `min-width` or `max-width`, default is always "min"
        $limit-min: 'min';
        $limit-max: 'max';
        $limit: $limit-min;

        // The "max" or "min" limit label that gets appended to the
        // generated class selector
        $limit-label: 'from';

        // When defining a breakpoint with a limit—which is of type `list()`—
        // we need to check this so we can separate the breakpoint and the
        // limit parts, so they can be used in the relevant parts of the
        // generated media query
        @if type-of($breakpoint) == 'list' {
            $limit: nth($breakpoint, 2);
            $breakpoint: nth($breakpoint, 1);
        }

        // Palm is a special case as it needs to use a `max-width` media query
        // as its viewport range is 0–640px
        @if $breakpoint == 'palm' {
            $limit: $limit-max;
        }

        // We have to check if the breakpoint is a number or a named
        // breakpoint so that we can apply the relevant functions: `em()` and
        // `bp()` so that we can generate the breakpoint value correctly
        $generate-breakpoint: $breakpoint;

        @if type-of($breakpoint) == 'number' {
            $breakpoint: strip-unit($breakpoint);
            $generate-breakpoint: em($breakpoint, 16);
        }
        @else {
            $generate-breakpoint: bp($breakpoint);
        }

        // Change the limit label when a "max" limit is used
        @if $limit == $limit-max {
            $limit-label: 'up-to';
        }

        // Construct the generated media query with the passed in limit and
        // breakpoint
        @media (#{$limit}-width: $generate-breakpoint) {
            // The generated class selector split into 3 parts:
            // [class-selector-passed-in]
            // [limit-label(min/max)]
            // [breakpoint(integer/named-breakpoint)]
            // E.g.
            // `.h-hide-visually-from-900`
            // `.h-hide-visually-up-to-palm`

            /* stylelint-disable-next-line max-line-length */
            $generated-selector: '#{$class-selector}-#{$limit-label}-#{$breakpoint}';

            // The contents of the media query
            #{$generated-selector} {
                @content;
            }
        }
    }
}




/* 5. Retrieve from maps
   ========================================================================= */

/**
 * An easier way to apply keys from the Shell maps defined in "Settings"
 * instead of using the native `map-get` function which can get tedious to
 * type again and again.
 *
 * For example, if you wanted to apply a key from the "Z-Index system" map
 * using the native `map-get` function you would have to do it like this:
 *
    z-index: map-get($shell-g-z-layers, header);
 *
 * And when applying nested map keys, this:
 *
    z-index: map-get(map-get($shell-g-z-layers, modal-elements), close-button);
 *
 * Instead we can apply it in a much nicer way:
 *
    z-index: z(header);
 *
 * And for a nested map key:
 *
    z-index: z(modal-elements, close-button);
 */


/// An easier way to apply keys from the "Breakpoints" map.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {String} $breakpoint — The breakpoint name which is the map key
/// name
///
/// @returns {Number [unit]} - The breakpoint converted to an `em` unit, the
/// conversion happens in the "Breakpoints" map values
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     @media (max-width: bp(palm)) {
///         background-color: crimson;
///     }
///     @media (min-width: bp(desk)) {
///         background-color: crimson;
///     }
/// @example css - CSS Output
///     @media (max-width: 40em) {
///         background-color: crimson;
///     }
///     @media (min-width: 75em) {
///         background-color: crimson;
///     }

@function bp($breakpoint) {
    @if not map-has-key($shell-g-breakpoints, $breakpoint) {
        /* stylelint-disable-next-line max-line-length */
        @error 'Sorry but `#{$breakpoint}` doesn\'t exist as a breakpoint name in the \'Breakpoints\' map.';
    }
    @return map-get($shell-g-breakpoints, $breakpoint);
}


/// An easier way to apply keys from the "Z-Index system" map.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {String} $z-index-layer — The `z-index` layer name which is the map
/// key name
/// @param {String} $z-index-layer-nested [null] — The nested `z-index` layer
/// name which is the nested map key name
///
/// @returns {Number [unitless]} - The `z-index` layer number
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     .element-1 {
///         z-index: z(header);
///     }
///     .element-2 {
///         z-index: z(modal-elements, close-button);
///     }
/// @example css - CSS Output
///     .element-1 {
///         z-index: 3;
///     }
///     .element-2 {
///         z-index: 1;
///     }

@function z($z-index-layer, $z-index-layer-nested: null) {
    @if not map-has-key($shell-g-z-layers, $z-index-layer) {
        /* stylelint-disable-next-line max-line-length */
        @error 'Sorry but `#{$z-index-layer}` doesn\'t exist as a `z-index` name in the \'Z-Index system\' map.';
    }
    @if ($z-index-layer-nested != null) {
        /* stylelint-disable-next-line max-line-length */
        @return map-get(map-get($shell-g-z-layers, $z-index-layer), $z-index-layer-nested);
    }
    @else {
        @return map-get($shell-g-z-layers, $z-index-layer);
    }
}




/* 6. Helpers
   ========================================================================= */

/**
 * Here are all the Helper mixins, see the Helpers intro comment block for
 * more information.
 */


/// Makes an element expand to contain floated children.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include clear-fix();
///     }
///     .element-2 {
///         @include clear-fix(true);
///     }
/// @example css - CSS Output
///     .element-1::after {
///         clear: both;
///         content: "";
///         display: table;
///     }
///     .element-2::after {
///         clear: both !important;
///         content: "" !important;
///         display: table !important;
///     }

@mixin clear-fix($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, ' !important', '');

    &::after {
        clear: both#{$important-keyword};
        content: '#{$important-keyword}';
        display: table#{$important-keyword};
    }
}


/// Truncate some text using an ellipsis.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
/// @param {String} $display [block] — Set the display property of the element
///
/// @example scss - Usage
///     .element-1 {
///         @include text-truncate(false, inline-block);
///     }
///     .element-2 {
///         @include text-truncate(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         display: inline-block;
///         overflow: hidden;
///         text-overflow: ellipsis;
///         white-space: nowrap;
///     }
///     .element-2 {
///         display: block !important;
///         overflow: hidden !important;
///         text-overflow: ellipsis !important;
///         white-space: nowrap !important;
///     }

@mixin text-truncate($apply-important-keyword: false, $display: block) {
    $important-keyword: if($apply-important-keyword, ' !important', '');
    $display-property-value: if($display == block, 'block', $display);

    display: #{$display-property-value}#{$important-keyword};
    overflow: hidden#{$important-keyword};
    text-overflow: ellipsis#{$important-keyword};
    white-space: nowrap#{$important-keyword};
}


/// Make text on OS X look more consistent with other systems that do not
/// render text using sub-pixel anti-aliasing.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include text-osx-font-smoothing();
///     }
///     .element-2 {
///         @include text-osx-font-smoothing(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         -moz-osx-font-smoothing: grayscale;
///         -webkit-font-smoothing: antialiased;
///     }
///     .element-2 {
///         -moz-osx-font-smoothing: grayscale !important;
///         -webkit-font-smoothing: antialiased !important;
///     }

@mixin text-osx-font-smoothing($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, ' !important', '');

    -moz-osx-font-smoothing: grayscale#{$important-keyword};
    -webkit-font-smoothing: antialiased#{$important-keyword};
}


/// Forces words to wrap onto new lines and applies hyphenation.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include text-wrap-word-and-hyphenate();
///     }
///     .element-2 {
///         @include text-wrap-word-and-hyphenate(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         hyphens: auto;
///         overflow-wrap: break-word;
///         word-wrap: break-word;
///     }
///     .element-2 {
///         hyphens: auto !important;
///         overflow-wrap: break-word !important;
///         word-wrap: break-word !important;
///     }

@mixin text-wrap-word-and-hyphenate($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, ' !important', '');

    hyphens: auto#{$important-keyword};
    overflow-wrap: break-word#{$important-keyword};
    word-wrap: break-word#{$important-keyword};
}


/// Hide elements only visually but have it available for screen readers.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @link http://unobfuscated.blogspot.com.au/2015/01/
///       updated-offscreen-techniques.html
/// @link https://medium.com/@jessebeach/
///       beware-smushed-off-screen-accessible-text-5952a4c2cbfe#.ixzj7idgo
///
/// @example scss - Usage
///     .element-1 {
///         @include hide-visually();
///     }
///     .element-2 {
///         @include hide-visually(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         clip: rect(1px, 1px, 1px, 1px);
///         clip-path: polygon(0 0, 0 0, 0 0, 0 0);
///         height: 1px;
///         overflow: hidden;
///         position: absolute;
///         white-space: nowrap;
///         width: 1px;
///     }
///     .element-2 {
///         clip: rect(1px, 1px, 1px, 1px) !important;
///         clip-path: polygon(0 0, 0 0, 0 0, 0 0) !important;
///         height: 1px !important;
///         overflow: hidden !important;
///         position: absolute !important;
///         white-space: nowrap !important;
///         width: 1px !important;
///     }

@mixin hide-visually($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, ' !important', '');

    // `clip` is deprecated but we keep it for browsers that don't support
    // `clip-path`
    /* stylelint-disable function-whitespace-after */
    clip: rect(1px, 1px, 1px, 1px)#{$important-keyword};
    clip-path: polygon(0 0, 0 0, 0 0, 0 0)#{$important-keyword};
    /* stylelint-enable */
    height: 1px#{$important-keyword};
    overflow: hidden#{$important-keyword};
    position: absolute#{$important-keyword};
    white-space: nowrap#{$important-keyword};
    width: 1px#{$important-keyword};
}


/// Makes an element be aligned horizontally and vertically using Flexbox,
/// must go on the parent of the element that needs the alignment.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include align-horizontally-and-vertically();
///     }
///     .element-2 {
///         @include align-horizontally-and-vertically(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         align-items: center;
///         display: flex;
///         flex-flow: column;
///         justify-content: center;
///     }
///     .element-2 {
///         align-items: center !important;
///         display: flex !important;
///         flex-flow: column;
///         justify-content: center !important;
///     }

@mixin align-horizontally-and-vertically($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, ' !important', '');

    align-items: center#{$important-keyword};
    display: flex#{$important-keyword};
    flex-flow: column;
    justify-content: center#{$important-keyword};
}


/// Makes an element be aligned horizontally and vertically using `position`
/// and `transform`, must go on the element that needs the alignment and the
/// elements parent must have `position: relative;`.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include align-horizontally-and-vertically-alt();
///     }
///     .element-2 {
///         @include align-horizontally-and-vertically-alt(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         left: 50%;
///         position: absolute;
///         top: 50%;
///         transform: translate(-50%, -50%);
///     }
///     .element-2 {
///         left: 50% !important;
///         position: absolute !important;
///         top: 50% !important;
///         transform: translate(-50%, -50%) !important;
///     }

@mixin align-horizontally-and-vertically-alt($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, ' !important', '');

    left: 50%#{$important-keyword};
    position: absolute#{$important-keyword};
    top: 50%#{$important-keyword};
    /* stylelint-disable-next-line function-whitespace-after */
    transform: translate(-50%, -50%)#{$important-keyword};
}


/// A container that retains the aspect ratio of its content when that content
/// needs to adapt to the width of varying viewports.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
/// @param {List} $ratio [16 9] - The ratio of the content e.g. `3 1`, `4 3`.
///
/// @exception `$ratio` must be a list with two values
///
/// @example scss - Usage
///     .element-1 {
///         @include intrinsic-ratio-container(false, 3 1);
///     }
///     .element-2 {
///         @include intrinsic-ratio-container(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         display: block;
///         height: 0;
///         overflow: hidden;
///         padding-bottom: 33.333%;
///         position: relative;
///     }
///     .element-2 {
///         display: block !important;
///         height: 0 !important;
///         overflow: hidden !important;
///         padding-bottom: 56.25% !important;
///         position: relative !important;
///     }

@mixin intrinsic-ratio-container(
    $apply-important-keyword: false, $ratio: 16 9) {
    $important-keyword: if($apply-important-keyword, ' !important', '');
    @if length($ratio) < 2 or length($ratio) > 2 {
        @error '#{inspect($ratio)} must be a list with two values.';
    }

    display: block#{$important-keyword};
    height: 0#{$important-keyword};
    overflow: hidden#{$important-keyword};
    /* stylelint-disable-next-line function-whitespace-after, max-line-length */
    padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1))#{$important-keyword};
    position: relative#{$important-keyword};
}


/// The content container for the "Intrinsic ratio container" mixin.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///    .element-1 {
///         @include intrinsic-ratio-content();
///     }
///     .element-2 {
///         @include intrinsic-ratio-content(true);
///     }
/// @example css - CSS Output
///    .element-1 {
///         height: 100%;
///         left: 0;
///         position: absolute;
///         top: 0;
///         width: 100%;
///     }
///     .element-2 {
///         height: 100% !important;
///         left: 0 !important;
///         position: absolute !important;
///         top: 0 !important;
///         width: 100% !important;
///     }

@mixin intrinsic-ratio-content($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, ' !important', '');

    height: 100%#{$important-keyword};
    left: 0#{$important-keyword};
    position: absolute#{$important-keyword};
    top: 0#{$important-keyword};
    width: 100%#{$important-keyword};
}




/* 7. Shared styles
   ========================================================================= */

/**
 * Certain styles need to be shared to keep things DRY.
 */

@mixin base-link {
    color: $shell-g-color-link;
    text-decoration: $shell-base-link-text-decoration;

    &:hover,
    &:focus {
        color: $shell-g-color-link-hover;
        text-decoration: $shell-base-link-text-decoration-on-hover;
    }
}
