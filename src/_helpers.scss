/* ============================================================================
   HELPERS
   ========================================================================= */


/**
 * The purpose of Helpers is to provide extremely common style treatments
 * and UI patterns, some good examples are:
 *
 * - Hide an element visually but have it available for screen readers.
 * - Truncate a line of text using an ellipsis.
 * - Applying white space outside of Components.
 *
 * Rather than repeating the CSS for these common style treatments and UI
 * patterns over and over and also the cognitive load of having to remember
 * their CSS declarations we instead abstract them into nicely reusable
 * classes and mixins.
 *
 * Helpers all follow the Single Responsibility Principle and the Open/Closed
 * Principle meaning they do one thing and one thing only and are never open to
 * extension i.e. you cannot modify or add to them in any way. If you need to
 * modify any of Shell's Helpers then you should simply not use them. Read more
 * about these principles and how they apply to CSS here:
 *
 * - http://csswizardry.com/2012/04/
 *   the-single-responsibility-principle-applied-to-css/
 * - http://csswizardry.com/2012/06/the-open-closed-principle-applied-to-css/
 *
 * Implementation
 *
 * Helpers are available as classes and sometimes as mixins, here we explain
 * how to implement the two different types. The class versions come with the
 * `!important` keyword, this is because they always need to win in terms of
 * CSS specificity as they should always just work. For the mixin versions
 * this is optional as the mixin versions are typically being applied from
 * within Components therefore do not require the specificity boost. All the
 * mixin versions are defined in "Mixins and Functions -> Helpers".
 *
 * Applying Helpers via their *class* implementation would only be done in two
 * scenarios:
 *
 * - **Outside of Components and Layout Templates:** this'll be rare as most
 *   of your UI should be componentised or encapsulated in a Layout Template,
 *   for example, a site header or footer. An example though, might be that
 *   you have a paragraph element (`<p>`) sitting between two Components in a
 *   view that needs to be center aligned, so you apply one of the "Text"
 *   Helper classes: `.h-text-align-center`, like so:
 *   `<p class="h-text-align-center">`. However, this could be argued that
 *   this paragraph element should become a Component. The main exception of
 *   avoiding Helpers outside of Components and Layout Templates is the
 *   "Spacing" Helpers as we don't want to bake in outside (`margin`) spacing
 *   to Components as this makes them contextual to surrounding UI.
 *
 * - **Inside of Components and Layout Templates:** although quite rare there
 *   are certain scenarios were you would want to be applying a Helper
 *   directly in the markup of a Component or Layout Template as opposed to
 *   applying it via the mixin implementation. However, this typically only
 *   ever applies to multi-line declaration Helpers, applying a single-line
 *   declaration Helper, for example:
 *
    .h-text-size {
        font-size: rem($shell-g-font-size) !important;
    }
 *
 *   Wouldn't be correct as you would simply write that single-line declaration
 *   directly into your Component or Layout Template CSS, and this is why
 *   single-line declaration Helpers do not come with a mixin version. An
 *   example of applying a multi-line declaration Helper directly in the
 *   markup of a Component or Layout Template would be when you're having to
 *   create a class to apply a fairly common Helper. For example, you're
 *   inside a "Drop Down Menu" Component needing to add a piece of text to the
 *   drop down menu trigger button that is only for screen reader users—using
 *   the "Hide visually" Helper. The correct way to achieve this would be:
 *
    <button type="button" class="c-drop-down-menu__trigger">
        My account
        <span class="h-hide-visually">Open the menu with the enter key and
        close it with the escape key; use the up and down arrow keys to
        navigate.</span>
    </button>
 *
 *   Not:
 *
    <button type="button" class="c-drop-down-menu__trigger">
        My account
        <span class="c-drop-down-menu__trigger-assistive-text">Open the menu
        with the enter key and close it with the escape key; use the up and
        down arrow keys to navigate.</span>
    </button>
    .c-drop-down-menu__trigger-assistive-text {
        @include h-hide-visually;
    }
 *
 *   Knowing when to do this isn't always clear and it is very case dependant.
 *
 * Applying Helpers via their *mixin* implementation would only be done in one
 * scenario:
 *
 * - **Inside of Components and Layout Templates:** any multi-line declaration
 *   Helpers should be applied via their mixin, this is to keep all the styles
 *   related to a Component or Layout Template nicely contained. For example,
 *   you may need to truncate a line of text in a site header Layout Template
 *   that is part of a main nav link item—using the "Text truncate" Helper.
 *   The correct way to achieve this would be:
 *
    <a href="some/url" class="l-header__nav-item">List &amp; Subscribers</a>
 *
    .l-header__nav-item {
        […]
        @include h-text-truncate;
    }
 *
 *   Not:
 *
    <a href="some/url" class="l-header__nav-item  h-text-truncate">List &amp;
    Subscribers</a>
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. it is important not to overuse certain Helpers, the exceptions are the
 * "Spacing" Helpers and the "Hide visually" and "Text truncate" Helpers.
 * Overuse can indicate that your UI is not componentised enough, which can
 * lead to a number of problems.
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. some Helpers are available to be applied at any breakpoint the Shell
 * consumer wishes, see "Mixins and Functions -> Apply at breakpoints" to
 * understand how this works.
 *
 * ----------------------------------------------------------------------------
 *
 * Helpers are namespaced with "h" followed by one hyphen, like this:
 *
   h-clear-fix
   h-text-truncate
 *
 * The "h" stands for "helper".
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Clear fix
 * 2. Text
 * 3. Hide
 * 4. Spacing
 * 5. Horizontal and vertical alignment
 * 6. Intrinsic ratio
 */




/* 1. Clear fix
   ========================================================================= */

/**
 * Makes an element expand to contain floated children.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-clear-fix {
    @include clear-fix(true);
}




/* 2. Text
   ========================================================================= */

/**
 * Sizes.
 */


/**
 * Base.
 */

.h-text-size {
    font-size: rem($shell-g-font-size) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size', $shell-helper-define-text-size-breakpoints) {
        font-size: rem($shell-g-font-size) !important;
    }
}

/* stylelint-enable */


/**
 * Decrease from base.
 */

// Small
.h-text-size-small {
    font-size: rem($shell-g-font-size-small) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-small-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-small', $shell-helper-define-text-size-small-breakpoints) {
        font-size: rem($shell-g-font-size-small) !important;
    }
}

/* stylelint-enable */

// X-small
.h-text-size-x-small {
    font-size: rem($shell-g-font-size-x-small) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-x-small-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-x-small', $shell-helper-define-text-size-x-small-breakpoints) {
        font-size: rem($shell-g-font-size-x-small) !important;
    }
}

/* stylelint-enable */

// 2X-small
.h-text-size-2x-small {
    font-size: rem($shell-g-font-size-2x-small) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-x-small-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-2x-small', $shell-helper-define-text-size-2x-small-breakpoints) {
        font-size: rem($shell-g-font-size-2x-small) !important;
    }
}

/* stylelint-enable */


/**
 * Increase from base.
 */

// Large
.h-text-size-large {
    font-size: rem($shell-g-font-size-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-large', $shell-helper-define-text-size-large-breakpoints) {
        font-size: rem($shell-g-font-size-large) !important;
    }
}

/* stylelint-enable */

// X-Large
.h-text-size-x-large {
    font-size: rem($shell-g-font-size-x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-x-large', $shell-helper-define-text-size-x-large-breakpoints) {
        font-size: rem($shell-g-font-size-x-large) !important;
    }
}

/* stylelint-enable */

// 2X-Large
.h-text-size-2x-large {
    font-size: rem($shell-g-font-size-2x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-2x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-2x-large', $shell-helper-define-text-size-2x-large-breakpoints) {
        font-size: rem($shell-g-font-size-2x-large) !important;
    }
}

/* stylelint-enable */

// 3X-Large
.h-text-size-3x-large {
    font-size: rem($shell-g-font-size-3x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-3x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-3x-large', $shell-helper-define-text-size-3x-large-breakpoints) {
        font-size: rem($shell-g-font-size-3x-large) !important;
    }
}

/* stylelint-enable */

// 4X-Large
.h-text-size-4x-large {
    font-size: rem($shell-g-font-size-4x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-4x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-4x-large', $shell-helper-define-text-size-4x-large-breakpoints) {
        font-size: rem($shell-g-font-size-4x-large) !important;
    }
}

/* stylelint-enable */

// 5X-Large
.h-text-size-5x-large {
    font-size: rem($shell-g-font-size-5x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-5x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-5x-large', $shell-helper-define-text-size-5x-large-breakpoints) {
        font-size: rem($shell-g-font-size-5x-large) !important;
    }
}

/* stylelint-enable */

// 6X-Large
.h-text-size-6x-large {
    font-size: rem($shell-g-font-size-6x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-6x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-6x-large', $shell-helper-define-text-size-6x-large-breakpoints) {
        font-size: rem($shell-g-font-size-6x-large) !important;
    }
}

/* stylelint-enable */

// 7X-Large
.h-text-size-7x-large {
    font-size: rem($shell-g-font-size-7x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-size-7x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-7x-large', $shell-helper-define-text-size-7x-large-breakpoints) {
        font-size: rem($shell-g-font-size-7x-large) !important;
    }
}

/* stylelint-enable */


/**
 * Alignments.
 */

// Center
.h-text-align-center {
    text-align: center !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-align-center-at-breakpoints {
    @include apply-at-breakpoints('.h-text-align-center', $shell-helper-define-text-align-center-breakpoints) {
        text-align: center !important;
    }
}

/* stylelint-enable */

// Left
.h-text-align-left {
    text-align: left !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-align-left-at-breakpoints {
    @include apply-at-breakpoints('.h-text-align-left', $shell-helper-define-text-align-left-breakpoints) {
        text-align: left !important;
    }
}

/* stylelint-enable */
// Right
.h-text-align-right {
    text-align: right !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-align-right-at-breakpoints {
    @include apply-at-breakpoints('.h-text-align-right', $shell-helper-define-text-align-right-breakpoints) {
        text-align: right !important;
    }
}

/* stylelint-enable */


/**
 * Truncate some text using an ellipsis. This Helper will only work on block
 * container elements so the default is set to `display: block;`, to override
 * this to be, say, `display: inline-block;` you have two options:
 *
 * 1. Use the "Inline" modifier class selector: `.h-text-truncate--inline`.
 * 2. Use the mixin assigning "inline-block" to the `$display` parameter:
 *    `@include h-text-truncate(inline-block);`.
 *
 * You can assign other `display` values when using the mixin but not sure if
 * that'll ever be required outside of `display: block;` and
 * `display: inline-block;`?
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-text-truncate {
    @include text-truncate(true);
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-truncate-at-breakpoints {
    @include apply-at-breakpoints('.h-text-truncate', $shell-helper-define-text-truncate-breakpoints) {
        @include text-truncate(true);
    }
}

/* stylelint-enable */

/**
 * Modifier: inline.
 */

.h-text-truncate--inline {
    display: inline-block !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-truncate-at-breakpoints {
    @include apply-at-breakpoints('.h-text-truncate--inline', $shell-helper-define-text-truncate-breakpoints) {
        display: inline-block !important;
    }
}

/* stylelint-enable */


/**
 * Forces words to wrap onto new lines when the word can't fit on a line which
 * is common when text is wrapped in a narrow width container. Hyphenation will
 * be applied to the wrapped word.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-text-wrap-word-and-hyphenate {
    @include text-wrap-word-and-hyphenate(true);
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-text-wrap-word-and-hyphenate-at-breakpoints {
    @include apply-at-breakpoints('.h-text-wrap-word-and-hyphenate', $shell-helper-define-text-wrap-word-and-hyphenate-breakpoints) {
        @include text-wrap-word-and-hyphenate(true);
    }
}

/* stylelint-enable */




/* 3. Hide
   ========================================================================= */

/**
 * Hide elements from both screen readers and the document flow.
 */

.h-hide {
    display: none !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-hide-at-breakpoints {
    @include apply-at-breakpoints('.h-hide', $shell-helper-define-hide-breakpoints) {
        display: none !important;
    }
}

/* stylelint-enable */


/**
 * Hide elements only visually but have it available for screen readers.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-hide-visually {
    @include hide-visually(true);
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-hide-visually-at-breakpoints {
    @include apply-at-breakpoints('.h-hide-visually', $shell-helper-define-hide-visually-breakpoints) {
        @include hide-visually(true);
    }
}

/* stylelint-enable */


/**
 * Hide elements for JavaScript users and non-JavaScript users, this is
 * necessary when building accessible and progressively enhanced UI's.
 *
 * These classes are applied to the `<html>` element depending whether
 * JavaScript is on or off:
 *
 * - `no-js` = JavaScript is off
 * - `js`    = JavaScript is on
 *
 * The `no-js` class is to be hard-coded to the `<html>` element in your master
 * layout to be replaced with the `js` class using JavaScript.
 *
 * N.B. these single-line declaration Helpers would typically always be applied
 * directly in the markup of your Components and Layout Templates.
 */

// JavaScript is off
.no-js .h-hide-if-js-off {
    display: none !important;
}

// JavaScript is on
.js .h-hide-if-js-on {
    display: none !important;
}


/**
 * Hide and show elements for print media.
 */

.h-show-for-print,
.h-show-for-print-inline,
.h-show-for-print-inline-block {
    display: none !important;
}

@media print {
    .h-hide-for-print {
        display: none !important;
    }

    .h-show-for-print {
        display: block !important;
    }

    .h-show-for-print-inline {
        display: inline !important;
    }

    .h-show-for-print-inline-block {
        display: inline-block !important;
    }
}




/* 4. Spacing
   ========================================================================= */

/**
 * Sometimes spacing outside of a Component is handled by one of these
 * "Spacing" Helpers, and ALL spacing is downward facing hence only
 * `margin-bottom` being used.
 */


/**
 * Base.
 */

.h-spacing {
    margin-bottom: rem($shell-g-spacing) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing', $shell-helper-define-spacing-breakpoints) {
        margin-bottom: rem($shell-g-spacing) !important;
    }
}

/* stylelint-enable */


/**
 * Decrease from base.
 */

// Small
.h-spacing-small {
    margin-bottom: rem($shell-g-spacing-small) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-small-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-small', $shell-helper-define-spacing-small-breakpoints) {
        margin-bottom: rem($shell-g-spacing-small) !important;
    }
}

/* stylelint-enable */

// X-Small
.h-spacing-x-small {
    margin-bottom: rem($shell-g-spacing-x-small) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-x-small-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-x-small', $shell-helper-define-spacing-x-small-breakpoints) {
        margin-bottom: rem($shell-g-spacing-x-small) !important;
    }
}

/* stylelint-enable */

// 2X-Small
.h-spacing-2x-small {
    margin-bottom: rem($shell-g-spacing-2x-small) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-2x-small-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-2x-small', $shell-helper-define-spacing-2x-small-breakpoints) {
        margin-bottom: rem($shell-g-spacing-2x-small) !important;
    }
}

/* stylelint-enable */


/**
 * Increase from base.
 */

// Large
.h-spacing-large {
    margin-bottom: rem($shell-g-spacing-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-large', $shell-helper-define-spacing-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-large) !important;
    }
}

/* stylelint-enable */

// X-Large
.h-spacing-x-large {
    margin-bottom: rem($shell-g-spacing-x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-x-large', $shell-helper-define-spacing-x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-x-large) !important;
    }
}

/* stylelint-enable */

// 2X-Large
.h-spacing-2x-large {
    margin-bottom: rem($shell-g-spacing-2x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-2x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-2x-large', $shell-helper-define-spacing-2x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-2x-large) !important;
    }
}

/* stylelint-enable */

// 3X-Large
.h-spacing-3x-large {
    margin-bottom: rem($shell-g-spacing-3x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-3x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-3x-large', $shell-helper-define-spacing-3x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-3x-large) !important;
    }
}

/* stylelint-enable */

// 4X-Large
.h-spacing-4x-large {
    margin-bottom: rem($shell-g-spacing-4x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-4x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-4x-large', $shell-helper-define-spacing-4x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-4x-large) !important;
    }
}

/* stylelint-enable */

// 5X-Large
.h-spacing-5x-large {
    margin-bottom: rem($shell-g-spacing-5x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-5x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-5x-large', $shell-helper-define-spacing-5x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-5x-large) !important;
    }
}

/* stylelint-enable */

// 6X-Large
.h-spacing-6x-large {
    margin-bottom: rem($shell-g-spacing-6x-large) !important;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-helper-apply-spacing-6x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-6x-large', $shell-helper-define-spacing-6x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-6x-large) !important;
    }
}

/* stylelint-enable */


/**
 * Remove spacing.
 */

.h-spacing-none {
    margin-bottom: 0 !important;
}




/* 5. Horizontal and vertical alignment
   ========================================================================= */

/**
 * Flexbox version, must go on the parent of the element that needs the
 * alignment.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-align-horizontally-and-vertically {
    @include align-horizontally-and-vertically(true);
}


/**
 * Position and transform version, must go on the element that needs the
 * alignment and the elements parent must have `position: relative;`.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-align-horizontally-and-vertically-parent {
    position: relative !important;
}

.h-align-horizontally-and-vertically-alt {
    @include align-horizontally-and-vertically-alt(true);
}




/* 6. Intrinsic ratio
   ========================================================================= */

/**
 * A container that retains the aspect ratio of its content when that content
 * needs to adapt to the width of varying viewports. The content would
 * typically be embedded elements, like:
 *
 * `<video>`
 * `<iframe>`
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 *
 * @credit
 * https://github.com/suitcss/components-flex-embed/blob/master/lib/
 * flex-embed.css
 */


/**
 * The container, the default ratio is "16:9".
 */

.h-intrinsic-ratio {
    @include intrinsic-ratio-container(true);
}

/**
 * Modifiers: different ratios, we can't use the mixin for this as it'll
 * generate too much CSS as we'll be generating every property for each
 * modifier when we only need to set the `padding-bottom` property—so we just
 * override the default ratio of "16:9".
 */

// 3:1 aspect ratio
.h-intrinsic-ratio--3-by-1 {
    padding-bottom: (100 / 3) * 1% !important;
}

// 2:1 aspect ratio
.h-intrinsic-ratio--2-by-1 {
    padding-bottom: 50% !important;
}

// 4:3 aspect ratio
.h-intrinsic-ratio--4-by-3 {
    padding-bottom: 75% !important;
}

// 1:1 aspect ratio
.h-intrinsic-ratio--1-by-1 {
    padding-bottom: 100% !important;
}


/**
 * The content.
 */

.h-intrinsic-ratio__content {
    @include intrinsic-ratio-content(true);
}
