/* ============================================================================
   GRID
   ========================================================================= */

/**
 * A powerful Flexbox-based grid that is responsive ready, nestable, and comes
 * with a bunch of handy modifiers. This makes the grid the workhorse of your
 * UI builds, any layout you need always look to the grid first—including
 * within your "Components", it exists so you don't have to write redundant
 * CSS to construct layouts.
 *
 * Every grid column width can be generated at any breakpoint thanks to the
 * mixin found here: "Mixins and Functions -> Apply at breakpoints". So if you
 * wanted 2 columns at smaller viewports then go to 4 columns at larger
 * viewports you can easily do this just by passing in the breakpoints you need
 * into the relevant settings, like so:
 *
   // 2 cols
   $shell-grid-apply-2-col-width-at-breakpoints: true;
   $shell-grid-define-2-col-width-breakpoints: (1199 max);

   // 4 cols
   $shell-grid-apply-4-col-width-at-breakpoints: true;
   $shell-grid-define-4-col-width-breakpoints: (desk);
 *
 * This will to compile to:
 *
    @media (max-width: 74.9375em) {
        .l-grid__item--2-col-up-to-desk {
            width: 16.6666%;
        }
    }

    @media (min-width: 75em) {
        .l-grid__item--4-col-from-desk {
            width: 33.3333%%;
        }
    }
 *
 * Other styles cannot be applied to a grid item. Grid is a "Layout Module"
 * therefore the Single Responsibility Principle and the Open/Close Principle
 * strictly applies. So this would be invalid:
 *
    <div class="l-grid__item  c-card">
        […]
    </div>
 *
 * Here we have wrongly applied a "Component" (`c-card`) to the same element as
 * a "Layout Module", we've mixed concerns, this can result in this part of
 * the UI being prone to breakages. The valid way to approach this would be:
 *
    <div class="l-grid__item">
        <div class="c-card">
            […]
        </div>
    </div>
 *
 * As nicely put by Harry Roberts:
 *
 * "Grid systems grid should be thought of as shelves. They contain content but
 * are not content in themselves. You put up your shelves then fill them with
 * your stuff. By setting up our grids separately to our components you can
 * move components around a lot more easily than if they had dimensions
 * applied to them; this makes our front-ends a lot more adaptable and quick
 * to work with."
 *
 * N.B. they're are a number of Flexbox bugs captured here:
 * https://github.com/philipwalton/flexbugs, these have been accounted for in
 * the Shell grid however if anything is missed please log an issue:
 * https://github.com/campaignmonitor/shell/issues.
 *
 * ----------------------------------------------------------------------------
 *
 * Grid is namespaced with "l" followed by one hyphen, like this:
 *
   l-grid
 *
 * The "l" stands for "layout" as Grid is a "Layout Module".
 *
 * ----------------------------------------------------------------------------
 *
 * @markup
    <div class="l-grid [modifier(s)]">
        <div class="l-grid__item l-grid__item--2-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--2-col">
            […]
        </div>
    </div>

    <div class="l-grid [modifier(s)]">
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
    </div>
 *
 * @credit
 * https://github.com/suitcss/components-grid
 */


/**
 * Grid container.
 *
 * 1. Negative left margin to negate the horizontal gutters.
 */

.l-grid {
    display: flex;
    flex-flow: row wrap;
    margin-left: -(rem($shell-g-spacing)); // [1]
}


/**
 * Grid items.
 *
 * 1. Allows the use of widths.
 * 2. Horizontal gutter.
 */

.l-grid__item {
    flex-basis: auto; // [1]
    padding-left: rem($shell-g-spacing); // [2]
}


/**
 * Modifier: all items match height of tallest item in a row.
 */

.l-grid--equal-height > .l-grid__item {
    display: flex;
}


/**
 * Modifier: fit, all grid items have an equal width.
 *
 * 1. Provide all values to avoid IE 10 bug with the shorthand `flex`
 *    property, see: http://git.io/vllC7.
 *    Use `0%` to avoid bug in IE 10/11 with unitless `flex-basis`, see:
 *    http://git.io/vllWx.
 */

.l-grid--fit .l-grid__item {
    flex: 1 1 0%;  // [1]
}


/**
 * Modifiers: horizontal gutter sizes.
 */

// Base
// N.B. having to reinstate the default so that any nested grids that use the
// "Gutterless" modifier can be easily reapplied
.l-grid--gutter-horizontal {
    margin-left: -(rem($shell-g-spacing));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing);
    }
}

// Decrease
.l-grid--gutter-horizontal-small {
    margin-left: -(rem($shell-g-spacing-small));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-small);
    }
}

.l-grid--gutter-horizontal-x-small {
    margin-left: -(rem($shell-g-spacing-x-small));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-x-small);
    }
}

.l-grid--gutter-horizontal-2x-small {
    margin-left: -(rem($shell-g-spacing-2x-small));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-2x-small);
    }
}

// Increase
.l-grid--gutter-horizontal-large {
    margin-left: -(rem($shell-g-spacing-large));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-large);
    }
}

.l-grid--gutter-horizontal-x-large {
    margin-left: -(rem($shell-g-spacing-x-large));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-x-large);
    }
}

.l-grid--gutter-horizontal-2x-large {
    margin-left: -(rem($shell-g-spacing-2x-large));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-2x-large);
    }
}

.l-grid--gutter-horizontal-3x-large {
    margin-left: -(rem($shell-g-spacing-3x-large));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-3x-large);
    }
}

.l-grid--gutter-horizontal-4x-large {
    margin-left: -(rem($shell-g-spacing-4x-large));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-4x-large);
    }
}

.l-grid--gutter-horizontal-5x-large {
    margin-left: -(rem($shell-g-spacing-5x-large));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-5x-large);
    }
}

.l-grid--gutter-horizontal-6x-large {
    margin-left: -(rem($shell-g-spacing-6x-large));

    > .l-grid__item {
        padding-left: rem($shell-g-spacing-6x-large);
    }
}


/**
 * Modifiers: vertical gutters.
 */

// Base
.l-grid--gutter-vertical {
    margin-bottom: -(rem($shell-g-spacing));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing);
    }
}

// Decrease
.l-grid--gutter-vertical-small {
    margin-bottom: -(rem($shell-g-spacing-small));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-small);
    }
}

.l-grid--gutter-vertical-x-small {
    margin-bottom: -(rem($shell-g-spacing-x-small));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-x-small);
    }
}

.l-grid--gutter-vertical-2x-small {
    margin-bottom: -(rem($shell-g-spacing-2x-small));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-2x-small);
    }
}

// Increase
.l-grid--gutter-vertical-large {
    margin-bottom: -(rem($shell-g-spacing-large));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-large);
    }
}

.l-grid--gutter-vertical-x-large {
    margin-bottom: -(rem($shell-g-spacing-x-large));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-x-large);
    }
}

.l-grid--gutter-vertical-2x-large {
    margin-bottom: -(rem($shell-g-spacing-2x-large));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-2x-large);
    }
}

.l-grid--gutter-vertical-3x-large {
    margin-bottom: -(rem($shell-g-spacing-3x-large));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-3x-large);
    }
}

.l-grid--gutter-vertical-4x-large {
    margin-bottom: -(rem($shell-g-spacing-4x-large));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-4x-large);
    }
}

.l-grid--gutter-vertical-5x-large {
    margin-bottom: -(rem($shell-g-spacing-5x-large));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-5x-large);
    }
}

.l-grid--gutter-vertical-6x-large {
    margin-bottom: -(rem($shell-g-spacing-6x-large));

    > .l-grid__item {
        margin-bottom: rem($shell-g-spacing-6x-large);
    }
}


/**
 * Modifier: gutterless for both horizontal gutters, we don't need to apply for
 * vertical gutters as their gutters aren't applied at the base level.
 *
 * N.B. we boost the specificity by chaining the base class to the modifier
 * class to make sure we're always overriding any gutter modifier classes.
 */

.l-grid.l-grid--gutterless {
    margin-left: 0;

    > .l-grid__item {
        padding-left: 0;
    }
}


/**
 * Modifiers: alignments.
 */

// Middle
.l-grid--align-middle {
    align-items: center;
}

// Bottom
.l-grid--align-bottom {
    align-items: flex-end;
}

// Center
.l-grid--align-center {
    justify-content: center;
}

// Right
.l-grid--align-right {
    justify-content: flex-end;
}


/**
 * Modifiers: "space between" and "space around".
 */

// Space between
.l-grid--space-between {
    justify-content: space-between;
}

// Space around
.l-grid--space-around {
    justify-content: space-around;
}


/**
 * Modifier: no wrap.
 */

.l-grid--nowrap {
    flex-wrap: nowrap;
}


/**
 * Modifier: horizontally center an individual grid item.
 */

.l-grid__item--align-center {
    margin: 0 auto;
}


/**
 * Modifiers: grid column widths.
 */

// 1 col
.l-grid__item--1-col {
    width: $shell-grid-1-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-1-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--1-col', $shell-grid-define-1-col-width-breakpoints) {
        width: $shell-grid-1-col-width;
    }
}

/* stylelint-enable */

// 2 col
.l-grid__item--2-col {
    width: $shell-grid-2-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-2-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--2-col', $shell-grid-define-2-col-width-breakpoints) {
        width: $shell-grid-2-col-width;
    }
}

/* stylelint-enable */

// 3 col
.l-grid__item--3-col {
    width: $shell-grid-3-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-3-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--3-col', $shell-grid-define-3-col-width-breakpoints) {
        width: $shell-grid-3-col-width;
    }
}

/* stylelint-enable */

// 4 col
.l-grid__item--4-col {
    width: $shell-grid-4-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-4-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--4-col', $shell-grid-define-4-col-width-breakpoints) {
        width: $shell-grid-4-col-width;
    }
}

/* stylelint-enable */

// 5 col
.l-grid__item--5-col {
    width: $shell-grid-5-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-5-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--5-col', $shell-grid-define-5-col-width-breakpoints) {
        width: $shell-grid-5-col-width;
    }
}

/* stylelint-enable */

// 6 col
.l-grid__item--6-col {
    width: $shell-grid-6-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-6-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--6-col', $shell-grid-define-6-col-width-breakpoints) {
        width: $shell-grid-6-col-width;
    }
}

/* stylelint-enable */

// 7 col
.l-grid__item--7-col {
    width: $shell-grid-7-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-7-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--7-col', $shell-grid-define-7-col-width-breakpoints) {
        width: $shell-grid-7-col-width;
    }
}

/* stylelint-enable */

// 8 col
.l-grid__item--8-col {
    width: $shell-grid-8-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-8-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--8-col', $shell-grid-define-8-col-width-breakpoints) {
        width: $shell-grid-8-col-width;
    }
}

/* stylelint-enable */

// 9 col
.l-grid__item--9-col {
    width: $shell-grid-9-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-9-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--9-col', $shell-grid-define-9-col-width-breakpoints) {
        width: $shell-grid-9-col-width;
    }
}

/* stylelint-enable */

// 10 col
.l-grid__item--10-col {
    width: $shell-grid-10-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-10-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--10-col', $shell-grid-define-10-col-width-breakpoints) {
        width: $shell-grid-10-col-width;
    }
}

/* stylelint-enable */

// 11 col
.l-grid__item--11-col {
    width: $shell-grid-11-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-11-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--11-col', $shell-grid-define-11-col-width-breakpoints) {
        width: $shell-grid-11-col-width;
    }
}

/* stylelint-enable */

// 12 col
.l-grid__item--12-col {
    width: $shell-grid-12-col-width;
}

// Apply at breakpoints
/* stylelint-disable max-line-length */

@if $shell-grid-apply-12-col-width-at-breakpoints {
    @include apply-at-breakpoints('.l-grid__item--12-col', $shell-grid-define-12-col-width-breakpoints) {
        width: $shell-grid-12-col-width;
    }
}

/* stylelint-enable */
